<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>bundleid</key>
	<string>com.pozafly</string>
	<key>category</key>
	<string>Tools</string>
	<key>connections</key>
	<dict>
		<key>33334FDD-F550-456F-A30D-D4F5EC03CBBA</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>8C692009-34FC-4245-9551-0B0CE8395FA5</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>3C1AC339-F7A6-4CA7-A57E-DB9CF75F1C80</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>FBA8DE97-1BE9-4317-9B5E-AF1DB96ABEE1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>8701F992-725E-4C46-8B7C-52A053D80496</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>B743777E-BD29-48C2-B4F5-8E04CACCC65F</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>8C692009-34FC-4245-9551-0B0CE8395FA5</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>B743777E-BD29-48C2-B4F5-8E04CACCC65F</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>B1DE9462-FB55-42BF-9CFF-B291E725661B</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>33334FDD-F550-456F-A30D-D4F5EC03CBBA</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>B743777E-BD29-48C2-B4F5-8E04CACCC65F</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>0BF8F217-70BB-4FD7-9B9F-F6EF04EE57B8</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>sourceoutputuid</key>
				<string>AF52CE3F-1195-4F5E-9C7D-CE2518EA16E2</string>
				<key>vitoclose</key>
				<false/>
			</dict>
			<dict>
				<key>destinationuid</key>
				<string>EEB16CB7-F5AD-4B51-9794-A8BE1FA874D4</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>DD69AF48-A55A-432A-B903-5F495D3BFF7E</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>FBA8DE97-1BE9-4317-9B5E-AF1DB96ABEE1</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
		<key>FBA8DE97-1BE9-4317-9B5E-AF1DB96ABEE1</key>
		<array>
			<dict>
				<key>destinationuid</key>
				<string>8701F992-725E-4C46-8B7C-52A053D80496</string>
				<key>modifiers</key>
				<integer>0</integer>
				<key>modifiersubtext</key>
				<string></string>
				<key>vitoclose</key>
				<false/>
			</dict>
		</array>
	</dict>
	<key>createdby</key>
	<string>pozafly</string>
	<key>description</key>
	<string>잘못 입력한 영타와 한타, 그리고 한타와 영타를 변환해줍니다.</string>
	<key>disabled</key>
	<false/>
	<key>name</key>
	<string>Korean-English-Converter</string>
	<key>objects</key>
	<array>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>keyword</key>
				<string>zz</string>
				<key>subtext</key>
				<string>The converted text is pasted directly</string>
				<key>text</key>
				<string>Convert text on the clipboard</string>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>3C1AC339-F7A6-4CA7-A57E-DB9CF75F1C80</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>lastpathcomponent</key>
				<false/>
				<key>onlyshowifquerypopulated</key>
				<false/>
				<key>removeextension</key>
				<false/>
				<key>text</key>
				<string>Invalid input on clipboard</string>
				<key>title</key>
				<string>Korean-English Converter</string>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.notification</string>
			<key>uid</key>
			<string>0BF8F217-70BB-4FD7-9B9F-F6EF04EE57B8</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>tell application "System Events" to key code 8 using command down
delay 0.05
return the clipboard</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>6</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>FBA8DE97-1BE9-4317-9B5E-AF1DB96ABEE1</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>function run(argv) {
  let [query] = argv;

  try {
    query = query.trim();
    return convert(query);
  } catch (err) {
    console.log(err)
    return false;
  }
}

function isUpperString(value) {
  if (value.toUpperCase() === value) {
    return true;
  }
  return false;
}

function convert(query) {
  if (isEng(query)) {
    if (isUpperString(query[0])) {
      query = query[0].toLowerCase() + query.substring(1);
    }

    return engTypeToKor(query);
  }

  // TODO: Alfred에 넣을 때 주석 풀어주자.
  const app = Application.currentApplication();
  app.includeStandardAdditions = true;

  query = app.doShellScript(`echo "${query}" | iconv -c -t utf-8 -f UTF-8-MAC`);
  return korTypeToEng(query);
}

function isEng(query) {
  const pattern = /^[a-zA-Z]+$/;
  return pattern.test(query[0]);
}

const ENG_KEY = 'rRseEfaqQtTdwWczxvgkoiOjpuPhynbml';
const KOR_KEY =
  'ㄱㄲㄴㄷㄸㄹㅁㅂㅃㅅㅆㅇㅈㅉㅊㅋㅌㅍㅎㅏㅐㅑㅒㅓㅔㅕㅖㅗㅛㅜㅠㅡㅣ';
const CHO_DATA = 'ㄱㄲㄴㄷㄸㄹㅁㅂㅃㅅㅆㅇㅈㅉㅊㅋㅌㅍㅎ';
const JUNG_DATA = 'ㅏㅐㅑㅒㅓㅔㅕㅖㅗㅘㅙㅚㅛㅜㅝㅞㅟㅠㅡㅢㅣ';
const JONG_DATA = 'ㄱㄲㄳㄴㄵㄶㄷㄹㄺㄻㄼㄽㄾㄿㅀㅁㅂㅄㅅㅆㅇㅈㅊㅋㅌㅍㅎ';

function engTypeToKor(src) {
  let res = '';
  if (src.length == 0) return res;

  let nCho = -1,
    nJung = -1,
    nJong = -1; // 초성, 중성, 종성

  for (let i = 0; i &lt; src.length; i++) {
    const ch = src.charAt(i);
    const p = ENG_KEY.indexOf(ch);
    if (p == -1) {
      // 영자판이 아님
      // 남아있는 한글이 있으면 처리
      if (nCho != -1) {
        if (nJung != -1)
          // 초성+중성+(종성)
          res += makeHangul(nCho, nJung, nJong);
        // 초성만
        else res += CHO_DATA.charAt(nCho);
      } else {
        if (nJung != -1)
          // 중성만
          res += JUNG_DATA.charAt(nJung);
        else if (nJong != -1)
          // 복자음
          res += JONG_DATA.charAt(nJong);
      }
      nCho = -1;
      nJung = -1;
      nJong = -1;
      res += ch;
    } else if (p &lt; 19) {
      // 자음
      if (nJung != -1) {
        if (nCho == -1) {
          // 중성만 입력됨, 초성으로
          res += JUNG_DATA.charAt(nJung);
          nJung = -1;
          nCho = CHO_DATA.indexOf(KOR_KEY.charAt(p));
        } else {
          // 종성이다
          if (nJong == -1) {
            // 종성 입력 중
            nJong = JONG_DATA.indexOf(KOR_KEY.charAt(p));
            if (nJong == -1) {
              // 종성이 아니라 초성이다
              res += makeHangul(nCho, nJung, nJong);
              nCho = CHO_DATA.indexOf(KOR_KEY.charAt(p));
              nJung = -1;
            }
          } else if (nJong == 0 &amp;&amp; p == 9) {
            // ㄳ
            nJong = 2;
          } else if (nJong == 3 &amp;&amp; p == 12) {
            // ㄵ
            nJong = 4;
          } else if (nJong == 3 &amp;&amp; p == 18) {
            // ㄶ
            nJong = 5;
          } else if (nJong == 7 &amp;&amp; p == 0) {
            // ㄺ
            nJong = 8;
          } else if (nJong == 7 &amp;&amp; p == 6) {
            // ㄻ
            nJong = 9;
          } else if (nJong == 7 &amp;&amp; p == 7) {
            // ㄼ
            nJong = 10;
          } else if (nJong == 7 &amp;&amp; p == 9) {
            // ㄽ
            nJong = 11;
          } else if (nJong == 7 &amp;&amp; p == 16) {
            // ㄾ
            nJong = 12;
          } else if (nJong == 7 &amp;&amp; p == 17) {
            // ㄿ
            nJong = 13;
          } else if (nJong == 7 &amp;&amp; p == 18) {
            // ㅀ
            nJong = 14;
          } else if (nJong == 16 &amp;&amp; p == 9) {
            // ㅄ
            nJong = 17;
          } else {
            // 종성 입력 끝, 초성으로
            res += makeHangul(nCho, nJung, nJong);
            nCho = CHO_DATA.indexOf(KOR_KEY.charAt(p));
            nJung = -1;
            nJong = -1;
          }
        }
      } else {
        // 초성 또는 (단/복)자음이다
        if (nCho == -1) {
          // 초성 입력 시작
          if (nJong != -1) {
            // 복자음 후 초성
            res += JONG_DATA.charAt(nJong);
            nJong = -1;
          }
          nCho = CHO_DATA.indexOf(KOR_KEY.charAt(p));
        } else if (nCho == 0 &amp;&amp; p == 9) {
          // ㄳ
          nCho = -1;
          nJong = 2;
        } else if (nCho == 2 &amp;&amp; p == 12) {
          // ㄵ
          nCho = -1;
          nJong = 4;
        } else if (nCho == 2 &amp;&amp; p == 18) {
          // ㄶ
          nCho = -1;
          nJong = 5;
        } else if (nCho == 5 &amp;&amp; p == 0) {
          // ㄺ
          nCho = -1;
          nJong = 8;
        } else if (nCho == 5 &amp;&amp; p == 6) {
          // ㄻ
          nCho = -1;
          nJong = 9;
        } else if (nCho == 5 &amp;&amp; p == 7) {
          // ㄼ
          nCho = -1;
          nJong = 10;
        } else if (nCho == 5 &amp;&amp; p == 9) {
          // ㄽ
          nCho = -1;
          nJong = 11;
        } else if (nCho == 5 &amp;&amp; p == 16) {
          // ㄾ
          nCho = -1;
          nJong = 12;
        } else if (nCho == 5 &amp;&amp; p == 17) {
          // ㄿ
          nCho = -1;
          nJong = 13;
        } else if (nCho == 5 &amp;&amp; p == 18) {
          // ㅀ
          nCho = -1;
          nJong = 14;
        } else if (nCho == 7 &amp;&amp; p == 9) {
          // ㅄ
          nCho = -1;
          nJong = 17;
        } else {
          // 단자음을 연타
          res += CHO_DATA.charAt(nCho);
          nCho = CHO_DATA.indexOf(KOR_KEY.charAt(p));
        }
      }
    } else {
      // 모음
      if (nJong != -1) {
        // (앞글자 종성), 초성+중성
        // 복자음 다시 분해
        let newCho; // (임시용) 초성
        if (nJong == 2) {
          // ㄱ, ㅅ
          nJong = 0;
          newCho = 9;
        } else if (nJong == 4) {
          // ㄴ, ㅈ
          nJong = 3;
          newCho = 12;
        } else if (nJong == 5) {
          // ㄴ, ㅎ
          nJong = 3;
          newCho = 18;
        } else if (nJong == 8) {
          // ㄹ, ㄱ
          nJong = 7;
          newCho = 0;
        } else if (nJong == 9) {
          // ㄹ, ㅁ
          nJong = 7;
          newCho = 6;
        } else if (nJong == 10) {
          // ㄹ, ㅂ
          nJong = 7;
          newCho = 7;
        } else if (nJong == 11) {
          // ㄹ, ㅅ
          nJong = 7;
          newCho = 9;
        } else if (nJong == 12) {
          // ㄹ, ㅌ
          nJong = 7;
          newCho = 16;
        } else if (nJong == 13) {
          // ㄹ, ㅍ
          nJong = 7;
          newCho = 17;
        } else if (nJong == 14) {
          // ㄹ, ㅎ
          nJong = 7;
          newCho = 18;
        } else if (nJong == 17) {
          // ㅂ, ㅅ
          nJong = 16;
          newCho = 9;
        } else {
          // 복자음 아님
          newCho = CHO_DATA.indexOf(JONG_DATA.charAt(nJong));
          nJong = -1;
        }
        if (nCho != -1)
          // 앞글자가 초성+중성+(종성)
          res += makeHangul(nCho, nJung, nJong);
        // 복자음만 있음
        else res += JONG_DATA.charAt(nJong);

        nCho = newCho;
        nJung = -1;
        nJong = -1;
      }
      if (nJung == -1) {
        // 중성 입력 중
        nJung = JUNG_DATA.indexOf(KOR_KEY.charAt(p));
      } else if (nJung == 8 &amp;&amp; p == 19) {
        // ㅘ
        nJung = 9;
      } else if (nJung == 8 &amp;&amp; p == 20) {
        // ㅙ
        nJung = 10;
      } else if (nJung == 8 &amp;&amp; p == 32) {
        // ㅚ
        nJung = 11;
      } else if (nJung == 13 &amp;&amp; p == 23) {
        // ㅝ
        nJung = 14;
      } else if (nJung == 13 &amp;&amp; p == 24) {
        // ㅞ
        nJung = 15;
      } else if (nJung == 13 &amp;&amp; p == 32) {
        // ㅟ
        nJung = 16;
      } else if (nJung == 18 &amp;&amp; p == 32) {
        // ㅢ
        nJung = 19;
      } else {
        // 조합 안되는 모음 입력
        if (nCho != -1) {
          // 초성+중성 후 중성
          res += makeHangul(nCho, nJung, nJong);
          nCho = -1;
        } // 중성 후 중성
        else res += JUNG_DATA.charAt(nJung);
        nJung = -1;
        res += KOR_KEY.charAt(p);
      }
    }
  }

  // 마지막 한글이 있으면 처리
  if (nCho != -1) {
    if (nJung != -1)
      // 초성+중성+(종성)
      res += makeHangul(nCho, nJung, nJong);
    // 초성만
    else res += CHO_DATA.charAt(nCho);
  } else {
    if (nJung != -1)
      // 중성만
      res += JUNG_DATA.charAt(nJung);
    else {
      // 복자음
      if (nJong != -1) res += JONG_DATA.charAt(nJong);
    }
  }

  return res;
}

function makeHangul(nCho, nJung, nJong) {
  return String.fromCharCode(0xac00 + nCho * 21 * 28 + nJung * 28 + nJong + 1);
}

function korTypeToEng(src) {
  let res = '';
  if (src.length == 0) return res;

  for (let i = 0; i &lt; src.length; i++) {
    const ch = src.charAt(i);
    let nCode = ch.charCodeAt(0);
    const nCho = CHO_DATA.indexOf(ch),
      nJung = JUNG_DATA.indexOf(ch),
      nJong = JONG_DATA.indexOf(ch);
    const arrKeyIndex = [-1, -1, -1, -1, -1];

    if (0xac00 &lt;= nCode &amp;&amp; nCode &lt;= 0xd7a3) {
      nCode -= 0xac00;
      arrKeyIndex[0] = Math.floor(nCode / (21 * 28)); // 초성
      arrKeyIndex[1] = Math.floor(nCode / 28) % 21; // 중성
      arrKeyIndex[3] = (nCode % 28) - 1; // 종성
    } else if (nCho != -1)
      // 초성 자음
      arrKeyIndex[0] = nCho;
    else if (nJung != -1)
      // 중성
      arrKeyIndex[1] = nJung;
    else if (nJong != -1)
      // 종성 자음
      arrKeyIndex[3] = nJong;
    // 한글이 아님
    else res += ch;

    // 실제 Key Index로 변경. 초성은 순서 동일
    if (arrKeyIndex[1] != -1) {
      if (arrKeyIndex[1] == 9) {
        // ㅘ
        arrKeyIndex[1] = 27;
        arrKeyIndex[2] = 19;
      } else if (arrKeyIndex[1] == 10) {
        // ㅙ
        arrKeyIndex[1] = 27;
        arrKeyIndex[2] = 20;
      } else if (arrKeyIndex[1] == 11) {
        // ㅚ
        arrKeyIndex[1] = 27;
        arrKeyIndex[2] = 32;
      } else if (arrKeyIndex[1] == 14) {
        // ㅝ
        arrKeyIndex[1] = 29;
        arrKeyIndex[2] = 23;
      } else if (arrKeyIndex[1] == 15) {
        // ㅞ
        arrKeyIndex[1] = 29;
        arrKeyIndex[2] = 24;
      } else if (arrKeyIndex[1] == 16) {
        // ㅟ
        arrKeyIndex[1] = 29;
        arrKeyIndex[2] = 32;
      } else if (arrKeyIndex[1] == 19) {
        // ㅢ
        arrKeyIndex[1] = 31;
        arrKeyIndex[2] = 32;
      } else {
        arrKeyIndex[1] = KOR_KEY.indexOf(JUNG_DATA.charAt(arrKeyIndex[1]));
        arrKeyIndex[2] = -1;
      }
    }
    if (arrKeyIndex[3] != -1) {
      if (arrKeyIndex[3] == 2) {
        // ㄳ
        arrKeyIndex[3] = 0;
        arrKeyIndex[4] = 9;
      } else if (arrKeyIndex[3] == 4) {
        // ㄵ
        arrKeyIndex[3] = 2;
        arrKeyIndex[4] = 12;
      } else if (arrKeyIndex[3] == 5) {
        // ㄶ
        arrKeyIndex[3] = 2;
        arrKeyIndex[4] = 18;
      } else if (arrKeyIndex[3] == 8) {
        // ㄺ
        arrKeyIndex[3] = 5;
        arrKeyIndex[4] = 0;
      } else if (arrKeyIndex[3] == 9) {
        // ㄻ
        arrKeyIndex[3] = 5;
        arrKeyIndex[4] = 6;
      } else if (arrKeyIndex[3] == 10) {
        // ㄼ
        arrKeyIndex[3] = 5;
        arrKeyIndex[4] = 7;
      } else if (arrKeyIndex[3] == 11) {
        // ㄽ
        arrKeyIndex[3] = 5;
        arrKeyIndex[4] = 9;
      } else if (arrKeyIndex[3] == 12) {
        // ㄾ
        arrKeyIndex[3] = 5;
        arrKeyIndex[4] = 16;
      } else if (arrKeyIndex[3] == 13) {
        // ㄿ
        arrKeyIndex[3] = 5;
        arrKeyIndex[4] = 17;
      } else if (arrKeyIndex[3] == 14) {
        // ㅀ
        arrKeyIndex[3] = 5;
        arrKeyIndex[4] = 18;
      } else if (arrKeyIndex[3] == 17) {
        // ㅄ
        arrKeyIndex[3] = 7;
        arrKeyIndex[4] = 9;
      } else {
        arrKeyIndex[3] = KOR_KEY.indexOf(JONG_DATA.charAt(arrKeyIndex[3]));
        arrKeyIndex[4] = -1;
      }
    }

    for (let j = 0; j &lt; 5; j++) {
      if (arrKeyIndex[j] != -1) res += ENG_KEY.charAt(arrKeyIndex[j]);
    }
  }

  return res;
}</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>7</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>8701F992-725E-4C46-8B7C-52A053D80496</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>action</key>
				<integer>0</integer>
				<key>argument</key>
				<integer>0</integer>
				<key>focusedappvariable</key>
				<false/>
				<key>focusedappvariablename</key>
				<string></string>
				<key>hotkey</key>
				<integer>44</integer>
				<key>hotmod</key>
				<integer>1310720</integer>
				<key>hotstring</key>
				<string>/</string>
				<key>leftcursor</key>
				<false/>
				<key>modsmode</key>
				<integer>0</integer>
				<key>relatedAppsMode</key>
				<integer>0</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.trigger.hotkey</string>
			<key>uid</key>
			<string>DD69AF48-A55A-432A-B903-5F495D3BFF7E</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>conditions</key>
				<array>
					<dict>
						<key>inputstring</key>
						<string></string>
						<key>matchcasesensitive</key>
						<false/>
						<key>matchmode</key>
						<integer>4</integer>
						<key>matchstring</key>
						<string>^false$</string>
						<key>outputlabel</key>
						<string>Err</string>
						<key>uid</key>
						<string>AF52CE3F-1195-4F5E-9C7D-CE2518EA16E2</string>
					</dict>
				</array>
				<key>elselabel</key>
				<string>Success</string>
				<key>hideelse</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.utility.conditional</string>
			<key>uid</key>
			<string>B743777E-BD29-48C2-B4F5-8E04CACCC65F</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>tell application "System Events" to keystroke "c" using {command down}
delay 0.1
return the clipboard</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>6</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>33334FDD-F550-456F-A30D-D4F5EC03CBBA</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>concurrently</key>
				<false/>
				<key>escaping</key>
				<integer>68</integer>
				<key>script</key>
				<string>function run(argv) {
  let [query] = argv;

  try {
    query = query.trim();
	return [...query].map((v) =&gt; {
      if (v.toUpperCase() === v) {
        return v.toLowerCase();
      }
      return v.toUpperCase();
    }).join('');
  } catch (err) {
    return false;
  }
}</string>
				<key>scriptargtype</key>
				<integer>1</integer>
				<key>scriptfile</key>
				<string></string>
				<key>type</key>
				<integer>7</integer>
			</dict>
			<key>type</key>
			<string>alfred.workflow.action.script</string>
			<key>uid</key>
			<string>8C692009-34FC-4245-9551-0B0CE8395FA5</string>
			<key>version</key>
			<integer>2</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>argumenttype</key>
				<integer>2</integer>
				<key>keyword</key>
				<string>ul</string>
				<key>subtext</key>
				<string>The converted text is pasted directly</string>
				<key>text</key>
				<string>Convert text on the clipboard</string>
				<key>withspace</key>
				<false/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.input.keyword</string>
			<key>uid</key>
			<string>B1DE9462-FB55-42BF-9CFF-B291E725661B</string>
			<key>version</key>
			<integer>1</integer>
		</dict>
		<dict>
			<key>config</key>
			<dict>
				<key>autopaste</key>
				<true/>
				<key>clipboardtext</key>
				<string>{query.trim}</string>
				<key>ignoredynamicplaceholders</key>
				<false/>
				<key>transient</key>
				<true/>
			</dict>
			<key>type</key>
			<string>alfred.workflow.output.clipboard</string>
			<key>uid</key>
			<string>EEB16CB7-F5AD-4B51-9794-A8BE1FA874D4</string>
			<key>version</key>
			<integer>3</integer>
		</dict>
	</array>
	<key>readme</key>
	<string>잘못 입력한 영타와 한타, 그리고 한타와 영타를 변환해줍니다.

1. 입력 문자를 드래그 합니다.
2. Command-Spacebar 키를 눌러 알프레드 창을 띄웁니다.
3. `zz` 단축키를 입력 후 Enter
4. 편잡창에 변환된 문자열이 들어갑니다.

0.0.5 fix
- Command-C 키를 눌러 복사하는 과정은 아제 제거 되었습니다.
- 붙여넣어진 후 한줄 내려가는 문제 해결

0.0.6 fix
- 첫글자가 대문자일 경우 변환 오류 해결

0.0.7 feature
- 문자를 드래그로 선택 후 command + control + / 키를 누르면 자동 변환되는 단축키 할당

0.0.8 fix
- 대문자를 한글로 변경 시 쌍이 변환되지 않는 문제 해결

0.0.9 fix
- 애플 실리콘 맥에서 동작하도록 한글 인코딩 방식 변경</string>
	<key>uidata</key>
	<dict>
		<key>0BF8F217-70BB-4FD7-9B9F-F6EF04EE57B8</key>
		<dict>
			<key>xpos</key>
			<real>825</real>
			<key>ypos</key>
			<real>95</real>
		</dict>
		<key>33334FDD-F550-456F-A30D-D4F5EC03CBBA</key>
		<dict>
			<key>xpos</key>
			<real>290</real>
			<key>ypos</key>
			<real>445</real>
		</dict>
		<key>3C1AC339-F7A6-4CA7-A57E-DB9CF75F1C80</key>
		<dict>
			<key>xpos</key>
			<real>60</real>
			<key>ypos</key>
			<real>40</real>
		</dict>
		<key>8701F992-725E-4C46-8B7C-52A053D80496</key>
		<dict>
			<key>xpos</key>
			<real>450</real>
			<key>ypos</key>
			<real>120</real>
		</dict>
		<key>8C692009-34FC-4245-9551-0B0CE8395FA5</key>
		<dict>
			<key>xpos</key>
			<real>465</real>
			<key>ypos</key>
			<real>445</real>
		</dict>
		<key>B1DE9462-FB55-42BF-9CFF-B291E725661B</key>
		<dict>
			<key>xpos</key>
			<real>85</real>
			<key>ypos</key>
			<real>445</real>
		</dict>
		<key>B743777E-BD29-48C2-B4F5-8E04CACCC65F</key>
		<dict>
			<key>xpos</key>
			<real>720</real>
			<key>ypos</key>
			<real>340</real>
		</dict>
		<key>DD69AF48-A55A-432A-B903-5F495D3BFF7E</key>
		<dict>
			<key>xpos</key>
			<real>65</real>
			<key>ypos</key>
			<real>210</real>
		</dict>
		<key>EEB16CB7-F5AD-4B51-9794-A8BE1FA874D4</key>
		<dict>
			<key>xpos</key>
			<real>875</real>
			<key>ypos</key>
			<real>445</real>
		</dict>
		<key>FBA8DE97-1BE9-4317-9B5E-AF1DB96ABEE1</key>
		<dict>
			<key>xpos</key>
			<real>275</real>
			<key>ypos</key>
			<real>115</real>
		</dict>
	</dict>
	<key>userconfigurationconfig</key>
	<array/>
	<key>variablesdontexport</key>
	<array/>
	<key>version</key>
	<string>0.0.9</string>
	<key>webaddress</key>
	<string>https://github.com/pozafly/alfred-korean-english-converter</string>
</dict>
</plist>
